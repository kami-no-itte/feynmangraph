%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Igor Musatov
%%Title: Window .0.c
%%CreationDate: Thu Mar 13 15:55:02 2003
%%BoundingBox: 0 415 502 793
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%EndComments

%%BeginProlog
50 dict begin

% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: tkCanvPs.c,v 1.7 2000/04/25 01:03:06 hobbs Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def

% Define the array ISOLatin1Encoding (which specifies how characters are
% encoded for ISO-8859-1 fonts), if it isn't already present (Postscript
% level 2 is supposed to define it, but level 1 doesn't).

systemdict /ISOLatin1Encoding known not {
    /ISOLatin1Encoding [
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /exclam /quotedbl /numbersign /dollar /percent /ampersand
	    /quoteright
	/parenleft /parenright /asterisk /plus /comma /minus /period /slash
	/zero /one /two /three /four /five /six /seven
	/eight /nine /colon /semicolon /less /equal /greater /question
	/at /A /B /C /D /E /F /G
	/H /I /J /K /L /M /N /O
	/P /Q /R /S /T /U /V /W
	/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
	/quoteleft /a /b /c /d /e /f /g
	/h /i /j /k /l /m /n /o
	/p /q /r /s /t /u /v /w
	/x /y /z /braceleft /bar /braceright /asciitilde /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/dotlessi /grave /acute /circumflex /tilde /macron /breve /dotaccent
	/dieresis /space /ring /cedilla /space /hungarumlaut /ogonek /caron
	/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
	/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen
	    /registered /macron
	/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
	    /periodcentered
	/cedillar /onesuperior /ordmasculine /guillemotright /onequarter
	    /onehalf /threequarters /questiondown
	/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
	/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex
	    /Idieresis
	/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
	/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
	    /germandbls
	/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
	/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex
	    /idieresis
	/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
	/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn
	    /ydieresis
    ] def
} if

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to ISOLatin1.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding ISOLatin1Encoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	stringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	stipple {

	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		char 0 3 -1 roll put
		currentpoint
		gsave
		char true charpath clip StippleText
		grestore
		char stringwidth translate
		moveto
	    } forall
	    grestore
	} {show} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%EndSetup

%%Page: 1 1
save
0.0 792.0 translate
0.7817 0.7817 scale
0 -482 translate
0 482 moveto 642 482 lineto 642 0 lineto 0 0 lineto closepath clip newpath
gsave
103 376 moveto
101.448145070305 369.004475284983 101.854971223918 364.208206766737 104.221700161 361.5967912365 curveto
106.588429098082 358.985375706263 109.269010183066 357.842390742356 112.271493209 358.1644039575 curveto
115.273976234934 358.486417172645 117.176153194893 359.557522629344 117.983736332 361.3809368605 curveto
118.791319469107 363.204351091656 118.20017059722 364.590805900838 116.2085144945 365.544464816 curveto
114.216858391781 366.498123731162 111.85834319835 366.186742195391 109.125886286 364.609385129 curveto
106.39342937365 363.032028062609 104.857317389617 360.464103525641 104.512937385 356.897900033 curveto
104.168557380383 353.331696540359 105.328132378483 350.401046514302 107.9951445865 348.097149204 curveto
110.662156794518 345.793251893698 113.461937377019 344.985069816267 116.4028940835 345.6701759985 curveto
119.343850789982 346.355282180734 121.101498077288 347.649971370892 121.6811141655 349.5581315245 curveto
122.260730253713 351.466291678109 121.505206486094 352.770476390073 119.4122740225 353.474602131 curveto
117.319341558907 354.178727871927 115.016269601241 353.582563519374 112.4961420175 351.68431879 curveto
109.976014433759 349.786074060626 108.763915340664 347.050257501906 108.856204801 343.4686534485 curveto
108.948494261336 339.887049395094 110.456189527199 337.119346604357 113.383818212 335.1572336565 curveto
116.311446896801 333.195120708642 119.18878550281 332.733761707132 122.0244746865 333.7717711895 curveto
124.860163870191 334.809780671868 126.447139785045 336.308797526829 126.7901681245 338.2733233065 curveto
127.133196463956 340.237849086171 126.224534796528 341.440366404464 124.0614544085 341.8844864245 curveto
121.898374020473 342.328606444535 119.684999165418 341.456526099334 117.414683072 339.265626529 curveto
115.144366978582 337.074726958666 114.274308472684 334.211708507501 114.801894766 330.6679735225 curveto
115.329481059316 327.124238537499 117.162872459356 324.56064736 120.307574646 322.969501518 curveto
123.452276832644 321.378355676 126.364378457669 321.270681598692 129.052624571 322.6461559405 curveto
131.740870684331 324.021630282307 133.133571942311 325.702679743614 133.234910631 327.694352521 curveto
133.336249319689 329.686025298386 132.287964387123 330.768990037931 130.0869078305 330.946498886 curveto
127.885851273878 331.124007734069 125.79509331269 329.98898195218 123.8083553945 327.5380130545 curveto
121.821617476311 325.087044156821 121.306540042671 322.139405832067 122.2615763145 318.6862463135 curveto
123.21661258633 315.233086794932 125.34843186926 312.911735831237 128.663436023 311.7152223985 curveto
131.97844017674 310.518708965762 134.881992782009 310.766321262439 137.382813216 312.458802869 curveto
139.883633649991 314.151284475561 141.061346437479 315.989364092025 140.9194882535 317.978561477 curveto
140.777630069522 319.967758861975 139.605313140274 320.915063957126 137.3990169945 320.8233215225 curveto
135.192720848725 320.731579087873 133.255675876681 319.350489245022 131.5820651265 316.675904577 curveto
129.908454376319 314.001319908978 129.756018823626 311.012902291504 131.124300704 307.7016774975 curveto
132.492582584374 304.390452703495 134.891122944739 302.345867686311 138.327124609 301.561782551 curveto
141.763126273261 300.777697415689 144.614944970724 301.376913318137 146.8911447215 303.3612297055 curveto
149.167344472277 305.345546092862 150.112552524737 307.313317884496 149.7296073415 309.270454305 curveto
149.346662158264 311.227590725504 148.067749243205 312.025146793748 145.889028017 311.665517573 curveto
143.710306790795 311.305888352252 141.955784711486 309.699275563928 140.620192944 306.840854545 curveto
139.284601176514 303.982433526072 139.497074697307 300.997683711124 141.258251565 297.8776418875 curveto
143.019428432693 294.757600063875 145.649016090316 293.020190353402 149.1549111975 292.6601953095 curveto
152.660806304684 292.300200265599 155.418475650909 293.24210756395 157.4362005255 295.488745755 curveto
159.453925400092 297.73538394605 160.15257052429 299.803581005223 159.5342339315 301.6995477345 curveto
158.915897338711 303.595514463777 157.549409863874 304.231459357468 155.430667941 303.60929216 curveto
153.311926018126 302.987124962532 151.766022050212 301.17888457497 150.788313683 298.179140846 curveto
149.810605315788 295.17939711703 150.384827765874 292.242707648628 152.512705425 289.3602535535 curveto
154.640583084126 286.477799458372 157.462107864497 285.073405758205 160.9857528135 285.1428550545 curveto
164.509397762504 285.212304350795 167.131902608361 286.482893944006 168.861142741 288.9584394185 curveto
170.590382873639 291.433984892994 171.032074036343 293.571846676042 170.187542629 295.378444773 curveto
169.343011221657 297.185042869958 167.909273120265 297.649918103883 165.882022805 296.7744664965 curveto
163.854772489735 295.899014889116 162.540479049118 293.916041079218 161.935195656 290.8195901905 curveto
161.329912262882 287.723139301781 162.257343162124 284.878187916965 164.7202734315 282.2761926385 curveto
167.183203700877 279.674197360034 170.154700726047 278.623707387549 173.6436879215 279.1215680965 curveto
177.132675116953 279.619428805451 179.581010631819 281.199803061073 180.996046825 283.867436732 curveto
182.411083018181 286.535070402927 182.589250893127 288.710800233189 181.5310854885 290.401159946 curveto
180.472920083874 292.091519658811 178.993255515588 292.378411087537 177.0876483465 291.262695768 curveto
175.182041177413 290.146980448463 174.11890590938 288.018766225198 173.895049944 284.8716620645 curveto
173.67119397862 281.724557903803 174.938039535616 279.013657907579 177.699390956 276.730821235 curveto
180.460742376384 274.447984562421 183.538016212028 273.767022381579 186.9404535255 274.685889761 curveto
190.342890838973 275.604757140421 192.580642633187 277.471410961744 193.6604288835 280.291456792 curveto
194.740215133814 283.111502622256 194.652209809231 285.292740607516 193.3961486295 286.841721012 curveto
192.140087449768 288.390701416484 190.636503644163 288.495342069086 188.880881946 287.155957206 curveto
187.125260247837 285.816572342914 186.329095291255 283.574770893242 186.4899961905 280.4238207205 curveto
186.650897089745 277.272870547757 188.238315357803 274.736341482724 191.2570180165 272.806616321 curveto
194.275720675198 270.876891159276 197.413002656461 270.575584802574 200.6782852275 271.901792427 curveto
203.94356779854 273.228000051426 205.93745351977 275.353170470876 206.665930036 278.2836855785 curveto
207.39440655223 281.214200686125 207.041536941563 283.368505010839 205.6062615355 284.753067935 curveto
204.170986129436 286.137630859161 202.665846069976 286.058464402863 201.086321417 284.515330829 curveto
199.506796764024 282.972197255137 198.989443576416 280.650151162433 199.532708241 277.5422194395 curveto
200.075972905584 274.434287716566 201.960354020868 272.109855685523 205.191510389 270.56194307 curveto
208.422666757132 269.014030454477 211.573295711062 269.09686128773 214.652858599 270.810684311 curveto
217.732421486938 272.52450733427 219.45278583234 274.876586435901 219.8191178945 277.8739849165 curveto
220.185449956661 280.871383397098 219.572964332217 282.966712833235 217.979821725 284.1662655055 curveto
216.386679117783 285.365818177764 214.902368934263 285.104022064602 213.5224337865 283.3800909915 curveto
212.142498638738 281.656159918398 211.911651876245 279.28840525402 212.8292002655 276.269716624 curveto
213.746748654756 273.25102799398 215.900065989948 271.173264554929 219.2956186895 270.030186777 curveto
222.691171389053 268.887108999071 225.808287630741 269.352845069465 228.656328124 271.428793595 curveto
231.504368617259 273.504742120535 232.925624400464 276.048747147956 232.924363509 279.068448332 curveto
232.923102617536 282.088149516044 232.060110552124 284.093339976053 230.332795745 285.090041305 curveto
228.605480937876 286.086742633947 227.164076954207 285.646210589131 226.0042552535 283.7671222515 curveto
224.844433552794 281.888033913868 224.903526627567 279.509786578831 226.1817119345 276.6252383625 curveto
227.459897241434 273.740690146169 229.850124248141 271.94049812535 233.3595708135 271.219256318 curveto
236.869017378859 270.49801451065 239.90625966246 271.339728869234 242.480418512 273.7469270645 curveto
245.05457736154 276.154125259765 246.155586073884 278.852218919644 245.7867509815 281.8493104275 curveto
245.417915889117 284.846401935355 244.317252767503 286.731629979529 242.481456322 287.5106559055 curveto
240.645659876497 288.28968183147 239.26860026821 287.67696594119 238.346142183 285.670668247 curveto
237.42368409779 283.66437055281 237.771838111274 281.311002506746 239.391649731 278.6034969375 curveto
241.011461350726 275.895991368253 243.603047894169 274.400145238893 247.1741919035 274.111466519 curveto
250.745335912832 273.822787799107 253.657530967666 275.027961526666 255.9195223985 277.730606842 curveto
258.181513829333 280.433252157334 258.945900035143 283.245305376747 258.21497647 286.1752111045 curveto
257.484052904857 289.105116832253 256.162089022527 290.842343236717 254.2451149615 291.392107214 curveto
252.328140900474 291.941871191283 251.03590684156 291.166084453085 250.364532202 289.0624173095 curveto
249.69315756244 286.958750165915 250.325194377622 284.665263335362 252.262540656 282.17506947 curveto
254.199886934378 279.684875604638 256.954288035286 278.515623266566 260.5340154335 278.6638011875 curveto
264.113742831715 278.811979108434 267.814231381805 281.839418030876 271.646593662 287.755209363 curveto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
restore showpage

%%Trailer
end
%%EOF
